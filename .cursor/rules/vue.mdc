---
description:
globs:
alwaysApply: false
---
# Vue 相关编码规范

## 组件结构
- 推荐使用 Composition API，减少 Options API 的使用
- 组件要小巧、职责单一
- 必须集成 TypeScript，类型声明清晰
- props 必须校验类型，默认值要合理
- emits 必须声明事件类型
- 模板逻辑要精简，避免复杂表达式

## Composition API
- ref/reactive 用法要规范，避免滥用
- 生命周期钩子要按需使用
- 可复用逻辑建议抽离为 composable
- setup 函数保持简洁，避免过多嵌套
- computed 属性优先于 methods 处理派生数据
- watch 使用时要处理异常，避免死循环

## 状态管理
- 推荐使用 Pinia，避免直接操作全局变量
- store 要模块化，便于维护
- actions/getters 要有明确类型
- 异步状态要有 loading/error 标识

## 性能优化
- 组件按需懒加载，避免一次性加载全部
- computed 缓存要合理，避免重复计算
- v-if/v-show 区分场景，避免误用
- 列表渲染时 key 必须唯一且稳定
- 避免不必要的 watch，减少性能损耗

## 路由
- 使用 Vue Router，路由配置要模块化
- 路由守卫要处理异常，防止导航死循环
- meta 字段用于权限、标题等扩展
- 路由参数要校验，避免类型错误
- 路由懒加载，提升首屏速度

## 表单
- v-model 用法要规范，避免双向绑定陷阱
- 表单校验要有用户提示
- 提交时处理 loading/error 状态
- 表单重置要清空所有字段
- 异常情况要有兜底处理

## TypeScript 集成
- 组件、props、emits、store 类型声明要完整
- composable 返回值类型要明确
- 避免 any，优先使用类型推断

## 测试
- 组件、composable 必须有单元测试
- 使用 Vue Test Utils，覆盖常见交互
- 异步逻辑要有 mock 测试
- 重要分支和异常情况要覆盖

## 其他最佳实践
- 遵循官方风格指南，命名统一
- 组件目录结构清晰，便于查找
- 错误处理要有日志或用户提示
- 复杂逻辑要有注释说明
- 事件处理要防抖/节流，避免频繁触发

## 构建与工具
- 推荐使用 Vite，配置分环境变量
- 构建产物要分包，按需加载
- 静态资源要有合理目录和命名
- 优化依赖体积，避免重复引入
